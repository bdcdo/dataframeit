Metadata-Version: 2.4
Name: dataframeit
Version: 0.1.0
Summary: Add your description here
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: langchain
Requires-Dist: pandas
Requires-Dist: pydantic
Requires-Dist: tqdm
Requires-Dist: langchain-google-genai
Provides-Extra: polars
Requires-Dist: polars>=0.20; extra == "polars"
Dynamic: license-file

# DataFrameIt

Uma biblioteca Python para enriquecer DataFrames com análises de texto usando Modelos de Linguagem (LLMs).

## Descrição

DataFrameIt é uma ferramenta que permite processar textos contidos em um DataFrame e extrair informações estruturadas usando LLMs. A biblioteca suporta tanto **LangChain** quanto **OpenAI** como provedores de modelos. Pandas é utilizado para manipulação de dados, com suporte para Polars via conversão interna.

## Funcionalidades

- Processar cada linha de um DataFrame que contenha textos
- Utilizar prompt templates para análise específica de domínio
- Extrair informações estruturadas usando modelos Pydantic
- **Suporte híbrido**: LangChain (Gemini, etc.) ou OpenAI (GPT-4, etc.)
- Suporte para Polars e Pandas
- Processamento incremental com resumo automático

## Uso Básico

### Com LangChain (comportamento padrão)

```python
from pydantic import BaseModel, Field
from typing import Literal
import pandas as pd
from dataframeit import dataframeit

# Defina um modelo Pydantic para estruturar as respostas
class SuaClasse(BaseModel):
    campo1: str = Field(..., description="Descrição do campo 1")
    campo2: Literal['opcao1', 'opcao2'] = Field(..., description="Descrição do campo 2")

# Defina seu template de prompt
TEMPLATE = """
Instruções para o modelo de linguagem...
{format}
Texto a ser analisado:
{sentenca}
"""

# Carregue seus dados
df = pd.read_excel('seu_arquivo.xlsx')

# Processe os dados (usa LangChain por padrão)
df_resultado = dataframeit(df, SuaClasse, TEMPLATE)

# Salve o resultado
df_resultado.to_excel('resultado.xlsx', index=False)
```

### Com OpenAI

```python
from openai import OpenAI
from dataframeit import dataframeit

# Configure seu cliente OpenAI (opcional)
client = OpenAI(api_key="sua-chave-aqui")

# Processe usando OpenAI
df_resultado = dataframeit(
    df, 
    SuaClasse, 
    TEMPLATE,
    use_openai=True,                    # Ativa o provider OpenAI
    model='gpt-4o-mini',                # Modelo OpenAI
    openai_client=client,               # Cliente customizado (opcional)
    reasoning_effort='minimal',         # 'minimal', 'low', 'medium', 'high'
    verbosity='low'                     # 'low', 'medium', 'high'
)
```

## Instalação

### Dependências Base
```bash
pip install dataframeit
```

### Para usar OpenAI
```bash
pip install dataframeit openai
```

### Para usar Polars
```bash
pip install dataframeit[polars]
```

## Parâmetros Avançados

### Parâmetros Gerais
- `resume=True`: Continua processamento de onde parou (útil para grandes datasets)
- `status_column=None`: Coluna para controlar status de processamento
- `text_column='texto'`: Nome da coluna que contém os textos a serem analisados

### Parâmetros LangChain
- `model='gemini-2.5-flash'`: Modelo a ser usado
- `provider='google_genai'`: Provider do LangChain

### Parâmetros OpenAI
- `use_openai=False`: Ativa o uso da OpenAI em vez de LangChain
- `openai_client=None`: Cliente OpenAI customizado (usa padrão se None)
- `model='gpt-4o-mini'`: Modelo OpenAI (quando `use_openai=True`)
- `reasoning_effort='minimal'`: Nível de raciocínio ('minimal', 'low', 'medium', 'high')
- `verbosity='low'`: Verbosidade das respostas ('low', 'medium', 'high')

## Exemplo Completo

Veja o diretório `example/` para um caso de uso completo com análise de decisões judiciais.

## Configuração de Variáveis de Ambiente

### Para OpenAI
```bash
export OPENAI_API_KEY="sua-chave-openai"
```

### Para Google Gemini (LangChain)
```bash
export GOOGLE_API_KEY="sua-chave-google"
```

## Contribuições

Contribuições são bem-vindas! Este é um projeto em desenvolvimento inicial.

## Licença

Veja o arquivo LICENSE para detalhes.
